E.kickWatchdog();
function KickWd(){
  if( (typeof(BTN1)=='undefined')||(!BTN1.read()) ) E.kickWatchdog();
}
var wdint=setInterval(KickWd,2000);
E.enableWatchdog(15, false);

const  display_mosi =D11;
const  display_clk =D5;
const  display_cmddata =D27;
const display_cs =D26;
const display_reset =D40;
const display_enable =D3;
const display_dc = D27;

const HIGH = 1;
const LOW = 0;
const OUTPUT = 'output';
const INPUT = 'input';

//var spi = new SPI();
//spi.setup({sck:D5,mosi:D11,mode:0}); //spi.send([0xab],D5); 

function delay(ms) {
  let now = Date().getTime();
  //console.log(now);
  let when = now + ms;
  for(let x=0; (x < 10000) && (now <= when); x++) {
    now = Date().getTime();
  }
  //console.log(now);
}


 const font57 = new Uint8Array([
  0x00, 0x00, 0x00, 0x00, 0x00,//0x0
  0x3E, 0x5B, 0x4F, 0x5B, 0x3E,//0x1
  0x3E, 0x6B, 0x4F, 0x6B, 0x3E,//0x2
  0x1C, 0x3E, 0x7C, 0x3E, 0x1C,//0x3
  0x18, 0x3C, 0x7E, 0x3C, 0x18,//0x4
  0x1C, 0x57, 0x7D, 0x57, 0x1C,//0x5
  0x1C, 0x5E, 0x7F, 0x5E, 0x1C,//0x6
  0x00, 0x18, 0x3C, 0x18, 0x00,//0x7
  0xFF, 0xE7, 0xC3, 0xE7, 0xFF,//0x8
  0x00, 0x18, 0x24, 0x18, 0x00,//0x9
  0xFF, 0xE7, 0xDB, 0xE7, 0xFF,//0xA
  0x30, 0x48, 0x3A, 0x06, 0x0E,//0xB
  0x26, 0x29, 0x79, 0x29, 0x26,//0xC
  0x40, 0x7F, 0x05, 0x05, 0x07,//0xD
  0x40, 0x7F, 0x05, 0x25, 0x3F,//0xE
  0x5A, 0x3C, 0xE7, 0x3C, 0x5A,//0xF
  0x7F, 0x3E, 0x1C, 0x1C, 0x08,//0x10
  0x08, 0x1C, 0x1C, 0x3E, 0x7F,//0x11
  0x14, 0x22, 0x7F, 0x22, 0x14,//0x12
  0x5F, 0x5F, 0x00, 0x5F, 0x5F,//0x13
  0x06, 0x09, 0x7F, 0x01, 0x7F,//0x14
  0x00, 0x66, 0x89, 0x95, 0x6A,//0x15
  0x60, 0x60, 0x60, 0x60, 0x60,//0x16
  0x94, 0xA2, 0xFF, 0xA2, 0x94,//0x17
  0x08, 0x04, 0x7E, 0x04, 0x08,//0x18
  0x10, 0x20, 0x7E, 0x20, 0x10,//0x19
  0x08, 0x08, 0x2A, 0x1C, 0x08,//0x1A
  0x08, 0x1C, 0x2A, 0x08, 0x08,//0x1B
  0x1E, 0x10, 0x10, 0x10, 0x10,//0x1C
  0x0C, 0x1E, 0x0C, 0x1E, 0x0C,//0x1D
  0x30, 0x38, 0x3E, 0x38, 0x30,//0x1E
  0x06, 0x0E, 0x3E, 0x0E, 0x06,//0x1F
  0x00, 0x00, 0x00, 0x00, 0x00,//0x20
  0x00, 0x00, 0x5F, 0x00, 0x00,//0x21
  0x00, 0x07, 0x00, 0x07, 0x00,//0x22
  0x14, 0x7F, 0x14, 0x7F, 0x14,//0x23
  0x24, 0x2A, 0x7F, 0x2A, 0x12,//0x24
  0x23, 0x13, 0x08, 0x64, 0x62,//0x25
  0x36, 0x49, 0x56, 0x20, 0x50,//0x26
  0x00, 0x08, 0x07, 0x03, 0x00,//0x27
  0x00, 0x1C, 0x22, 0x41, 0x00,//0x28
  0x00, 0x41, 0x22, 0x1C, 0x00,//0x29
  0x2A, 0x1C, 0x7F, 0x1C, 0x2A,//0x2A
  0x08, 0x08, 0x3E, 0x08, 0x08,//0x2B
  0x00, 0x80, 0x70, 0x30, 0x00,//0x2C
  0x08, 0x08, 0x08, 0x08, 0x08,//0x2D
  0x00, 0x00, 0x60, 0x60, 0x00,//0x2E
  0x20, 0x10, 0x08, 0x04, 0x02,//0x2F
  0x3E, 0x51, 0x49, 0x45, 0x3E,//0x30
  0x00, 0x42, 0x7F, 0x40, 0x00,//0x31
  0x72, 0x49, 0x49, 0x49, 0x46,//0x32
  0x21, 0x41, 0x49, 0x4D, 0x33,//0x33
  0x18, 0x14, 0x12, 0x7F, 0x10,//0x34
  0x27, 0x45, 0x45, 0x45, 0x39,//0x35
  0x3C, 0x4A, 0x49, 0x49, 0x31,//0x36
  0x41, 0x21, 0x11, 0x09, 0x07,//0x37
  0x36, 0x49, 0x49, 0x49, 0x36,//0x38
  0x46, 0x49, 0x49, 0x29, 0x1E,//0x39
  0x00, 0x00, 0x14, 0x00, 0x00,//0x3A
  0x00, 0x40, 0x34, 0x00, 0x00,//0x3B
  0x00, 0x08, 0x14, 0x22, 0x41,//0x3C
  0x14, 0x14, 0x14, 0x14, 0x14,//0x3D
  0x00, 0x41, 0x22, 0x14, 0x08,//0x3E
  0x02, 0x01, 0x59, 0x09, 0x06,//0x3F
  0x3E, 0x41, 0x5D, 0x59, 0x4E,//0x40
  0x7C, 0x12, 0x11, 0x12, 0x7C,//0x41
  0x7F, 0x49, 0x49, 0x49, 0x36,//0x42
  0x3E, 0x41, 0x41, 0x41, 0x22,//0x43
  0x7F, 0x41, 0x41, 0x41, 0x3E,//0x44
  0x7F, 0x49, 0x49, 0x49, 0x41,//0x45
  0x7F, 0x09, 0x09, 0x09, 0x01,//0x46
  0x3E, 0x41, 0x41, 0x51, 0x73,//0x47
  0x7F, 0x08, 0x08, 0x08, 0x7F,//0x48
  0x00, 0x41, 0x7F, 0x41, 0x00,//0x49
  0x20, 0x40, 0x41, 0x3F, 0x01,//0x4A
  0x7F, 0x08, 0x14, 0x22, 0x41,//0x4B
  0x7F, 0x40, 0x40, 0x40, 0x40,//0x4C
  0x7F, 0x02, 0x1C, 0x02, 0x7F,//0x4D
  0x7F, 0x04, 0x08, 0x10, 0x7F,//0x4E
  0x3E, 0x41, 0x41, 0x41, 0x3E,//0x4F
  0x7F, 0x09, 0x09, 0x09, 0x06,//0x50
  0x3E, 0x41, 0x51, 0x21, 0x5E,//0x51
  0x7F, 0x09, 0x19, 0x29, 0x46,//0x52
  0x26, 0x49, 0x49, 0x49, 0x32,//0x53
  0x03, 0x01, 0x7F, 0x01, 0x03,//0x54
  0x3F, 0x40, 0x40, 0x40, 0x3F,//0x55
  0x1F, 0x20, 0x40, 0x20, 0x1F,//0x56
  0x3F, 0x40, 0x38, 0x40, 0x3F,//0x57
  0x63, 0x14, 0x08, 0x14, 0x63,//0x58
  0x03, 0x04, 0x78, 0x04, 0x03,//0x59
  0x61, 0x59, 0x49, 0x4D, 0x43,//0x5A
  0x00, 0x7F, 0x41, 0x41, 0x41,//0x5B
  0x02, 0x04, 0x08, 0x10, 0x20,//0x5C
  0x00, 0x41, 0x41, 0x41, 0x7F,//0x5D
  0x04, 0x02, 0x01, 0x02, 0x04,//0x5E
  0x40, 0x40, 0x40, 0x40, 0x40,//0x5F
  0x00, 0x03, 0x07, 0x08, 0x00,//0x60
  0x20, 0x54, 0x54, 0x78, 0x40,//0x61
  0x7F, 0x28, 0x44, 0x44, 0x38,//0x62
  0x38, 0x44, 0x44, 0x44, 0x28,//0x63
  0x38, 0x44, 0x44, 0x28, 0x7F,//0x64
  0x38, 0x54, 0x54, 0x54, 0x18,//0x65
  0x00, 0x08, 0x7E, 0x09, 0x02,//0x66
  0x18, 0xA4, 0xA4, 0x9C, 0x78,//0x67
  0x7F, 0x08, 0x04, 0x04, 0x78,//0x68
  0x00, 0x44, 0x7D, 0x40, 0x00,//0x69
  0x20, 0x40, 0x40, 0x3D, 0x00,//0x6A
  0x7F, 0x10, 0x28, 0x44, 0x00,//0x6B
  0x00, 0x41, 0x7F, 0x40, 0x00,//0x6C
  0x7C, 0x04, 0x78, 0x04, 0x78,//0x6D
  0x7C, 0x08, 0x04, 0x04, 0x78,//0x6E
  0x38, 0x44, 0x44, 0x44, 0x38,//0x6F
  0xFC, 0x18, 0x24, 0x24, 0x18,//0x70
  0x18, 0x24, 0x24, 0x18, 0xFC,//0x71
  0x7C, 0x08, 0x04, 0x04, 0x08,//0x72
  0x48, 0x54, 0x54, 0x54, 0x24,//0x73
  0x04, 0x04, 0x3F, 0x44, 0x24,//0x74
  0x3C, 0x40, 0x40, 0x20, 0x7C,//0x75
  0x1C, 0x20, 0x40, 0x20, 0x1C,//0x76
  0x3C, 0x40, 0x30, 0x40, 0x3C,//0x77
  0x44, 0x28, 0x10, 0x28, 0x44,//0x78
  0x4C, 0x90, 0x90, 0x90, 0x7C,//0x79
  0x44, 0x64, 0x54, 0x4C, 0x44,//0x7A
  0x00, 0x08, 0x36, 0x41, 0x00,//0x7B
  0x00, 0x00, 0x77, 0x00, 0x00,//0x7C
  0x00, 0x41, 0x36, 0x08, 0x00,//0x7D
  0x02, 0x01, 0x02, 0x04, 0x02,//0x7E
  0x3C, 0x26, 0x23, 0x26, 0x3C,//0x7F
  0x1E, 0xA1, 0xA1, 0x61, 0x12,//0x80
  0x3A, 0x40, 0x40, 0x20, 0x7A,//0x81
  0x38, 0x54, 0x54, 0x55, 0x59,//0x82
  0x21, 0x55, 0x55, 0x79, 0x41,//0x83
  0x21, 0x54, 0x54, 0x78, 0x41,//0x84
  0x21, 0x55, 0x54, 0x78, 0x40,//0x85
  0x20, 0x54, 0x55, 0x79, 0x40,//0x86
  0x0C, 0x1E, 0x52, 0x72, 0x12,//0x87
  0x39, 0x55, 0x55, 0x55, 0x59,//0x88
  0x39, 0x54, 0x54, 0x54, 0x59,//0x89
  0x39, 0x55, 0x54, 0x54, 0x58,//0x8A
  0x00, 0x00, 0x45, 0x7C, 0x41,//0x8B
  0x00, 0x02, 0x45, 0x7D, 0x42,//0x8C
  0x00, 0x01, 0x45, 0x7C, 0x40,//0x8D
  0xF0, 0x29, 0x24, 0x29, 0xF0,//0x8E  Ä
  0xF0, 0x28, 0x25, 0x28, 0xF0,//0x8F
  0x7C, 0x54, 0x55, 0x45, 0x00,//0x90
  0x20, 0x54, 0x54, 0x7C, 0x54,//0x91
  0x7C, 0x0A, 0x09, 0x7F, 0x49,//0x92
  0x32, 0x49, 0x49, 0x49, 0x32,//0x93
  0x32, 0x48, 0x48, 0x48, 0x32,//0x94
  0x32, 0x4A, 0x48, 0x48, 0x30,//0x95
  0x3A, 0x41, 0x41, 0x21, 0x7A,//0x96
  0x3A, 0x42, 0x40, 0x20, 0x78,//0x97
  0x7f, 0x25, 0x25, 0x25, 0x1a,//0x00, 0x9D, 0xA0, 0xA0, 0x7D,//0x98++++++++++++++++++++++++ß
  0x39, 0x44, 0x44, 0x44, 0x39,//0x99
  0x3D, 0x40, 0x40, 0x40, 0x3D,//0x9A
  0x3C, 0x24, 0xFF, 0x24, 0x24,//0x9B
  0x48, 0x7E, 0x49, 0x43, 0x66,//0x9C
  0x2B, 0x2F, 0xFC, 0x2F, 0x2B,//0x9D
  0xFF, 0x09, 0x29, 0xF6, 0x20,//0x9E
  0xC0, 0x88, 0x7E, 0x09, 0x03,//0x9F
  0x20, 0x54, 0x54, 0x79, 0x41,//0xA0
  0x00, 0x00, 0x44, 0x7D, 0x41,//0xA1
  0x30, 0x48, 0x48, 0x4A, 0x32,//0xA2
  0x38, 0x40, 0x40, 0x22, 0x7A,//0xA3
  0x00, 0x7A, 0x0A, 0x0A, 0x72,//0xA4
  0x7D, 0x0D, 0x19, 0x31, 0x7D,//0xA5
  0x26, 0x29, 0x29, 0x2F, 0x28,//0xA6
  0x26, 0x29, 0x29, 0x29, 0x26,//0xA7
  0x30, 0x48, 0x4D, 0x40, 0x20,//0xA8
  0x38, 0x08, 0x08, 0x08, 0x08,//0xA9
  0x08, 0x08, 0x08, 0x08, 0x38,//0xAA
  0x2F, 0x10, 0xC8, 0xAC, 0xBA,//0xAB
  0x2F, 0x10, 0x28, 0x34, 0xFA,//0xAC
  0x00, 0x00, 0x7B, 0x00, 0x00,//0xAD
  0x08, 0x14, 0x2A, 0x14, 0x22,//0xAE
  0x22, 0x14, 0x2A, 0x14, 0x08,//0xAF
  0xAA, 0x00, 0x55, 0x00, 0xAA,//0xB0
  0xAA, 0x55, 0xAA, 0x55, 0xAA,//0xB1
  0x00, 0x00, 0x00, 0xFF, 0x00,//0xB2
  0x10, 0x10, 0x10, 0xFF, 0x00,//0xB3
  0x14, 0x14, 0x14, 0xFF, 0x00,//0xB4
  0x10, 0x10, 0xFF, 0x00, 0xFF,//0xB5
  0x10, 0x10, 0xF0, 0x10, 0xF0,//0xB6
  0x14, 0x14, 0x14, 0xFC, 0x00,//0xB7
  0x14, 0x14, 0xF7, 0x00, 0xFF,//0xB8
  0x00, 0x00, 0xFF, 0x00, 0xFF,//0xB9
  0x14, 0x14, 0xF4, 0x04, 0xFC,//0xBA
  0x14, 0x14, 0x17, 0x10, 0x1F,//0xBB
  0x10, 0x10, 0x1F, 0x10, 0x1F,//0xBC
  0x14, 0x14, 0x14, 0x1F, 0x00,//0xBD
  0x10, 0x10, 0x10, 0xF0, 0x00,//0xBE
  0x00, 0x00, 0x00, 0x1F, 0x10,//0xBF
  0x10, 0x10, 0x10, 0x1F, 0x10,//0xC0
  0x10, 0x10, 0x10, 0xF0, 0x10,//0xC1
  0x00, 0x00, 0x00, 0xFF, 0x10,//0xC2
  0x10, 0x10, 0x10, 0x10, 0x10,//0xC3
  0x10, 0x10, 0x10, 0xFF, 0x10,//0xC4
  0x00, 0x00, 0x00, 0xFF, 0x14,//0xC5
  0x00, 0x00, 0xFF, 0x00, 0xFF,//0xC6
  0x00, 0x00, 0x1F, 0x10, 0x17,//0xC7
  0x00, 0x00, 0xFC, 0x04, 0xF4,//0xC8
  0x14, 0x14, 0x17, 0x10, 0x17,//0xC9
  0x14, 0x14, 0xF4, 0x04, 0xF4,//0xCA
  0x00, 0x00, 0xFF, 0x00, 0xF7,//0xCB
  0x14, 0x14, 0x14, 0x14, 0x14,//0xCC
  0x14, 0x14, 0xF7, 0x00, 0xF7,//0xCD
  0x14, 0x14, 0x14, 0x17, 0x14,//0xCE
  0x10, 0x10, 0x1F, 0x10, 0x1F,//0xCF
  0x14, 0x14, 0x14, 0xF4, 0x14,//0xD0
  0x10, 0x10, 0xF0, 0x10, 0xF0,//0xD1
  0x00, 0x00, 0x1F, 0x10, 0x1F,//0xD2
  0x00, 0x00, 0x00, 0x1F, 0x14,//0xD3
  0x00, 0x00, 0x00, 0xFC, 0x14,//0xD4
  0x00, 0x00, 0xF0, 0x10, 0xF0,//0xD5
  0x10, 0x10, 0xFF, 0x10, 0xFF,//0xD6
  0x14, 0x14, 0x14, 0xFF, 0x14,//0xD7
  0x10, 0x10, 0x10, 0x1F, 0x00,//0xD8
  0x00, 0x00, 0x00, 0xF0, 0x10,//0xD9
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF,//0xDA
  0xF0, 0xF0, 0xF0, 0xF0, 0xF0,//0xDB
  0xFF, 0xFF, 0xFF, 0x00, 0x00,//0xDC
  0x00, 0x00, 0x00, 0xFF, 0xFF,//0xDD
  0x0F, 0x0F, 0x0F, 0x0F, 0x0F,//0xDE
  0x38, 0x44, 0x44, 0x38, 0x44,//0xDF
  0x7C, 0x2A, 0x2A, 0x3E, 0x14,//0xE0
  0x7E, 0x02, 0x02, 0x06, 0x06,//0xE1
  0x02, 0x7E, 0x02, 0x7E, 0x02,//0xE2
  0x63, 0x55, 0x49, 0x41, 0x63,//0xE3
  0x38, 0x44, 0x44, 0x3C, 0x04,//0xE4
  0x40, 0x7E, 0x20, 0x1E, 0x20,//0xE5
  0x06, 0x02, 0x7E, 0x02, 0x02,//0xE6
  0x99, 0xA5, 0xE7, 0xA5, 0x99,//0xE7
  0x1C, 0x2A, 0x49, 0x2A, 0x1C,//0xE8
  0x4C, 0x72, 0x01, 0x72, 0x4C,//0xE9
  0x30, 0x4A, 0x4D, 0x4D, 0x30,//0xEA
  0x30, 0x48, 0x78, 0x48, 0x30,//0xEB
  0xBC, 0x62, 0x5A, 0x46, 0x3D,//0xEC
  0x3E, 0x49, 0x49, 0x49, 0x00,//0xED
  0x7E, 0x01, 0x01, 0x01, 0x7E,//0xEE
  0x2A, 0x2A, 0x2A, 0x2A, 0x2A,//0xEF
  0x44, 0x44, 0x5F, 0x44, 0x44,//0xF0
  0x40, 0x51, 0x4A, 0x44, 0x40,//0xF1
  0x40, 0x44, 0x4A, 0x51, 0x40,//0xF2
  0x00, 0x00, 0xFF, 0x01, 0x03,//0xF3
  0xE0, 0x80, 0xFF, 0x00, 0x00,//0xF4
  0x08, 0x08, 0x6B, 0x6B, 0x08,//0xF5
  0x36, 0x12, 0x36, 0x24, 0x36,//0xF6
  0x06, 0x0F, 0x09, 0x0F, 0x06,//0xF7
  0x00, 0x00, 0x18, 0x18, 0x00,//0xF8
  0x00, 0x00, 0x10, 0x10, 0x00,//0xF9
  0x30, 0x40, 0xFF, 0x01, 0x01,//0xFA
  0x00, 0x1F, 0x01, 0x01, 0x1E,//0xFB
  0x00, 0x19, 0x1D, 0x17, 0x12,//0xFC
  0x00, 0x3C, 0x3C, 0x3C, 0x3C,//0xFD
  0x00, 0x00, 0x00, 0x00, 0x00 //0xFE
]);

let last_uni_char = false;
let last_char;
let widthheigthWindow = 0;

function spiWrite1( d) {
  for (let bit = 0x80; bit; bit >>= 1) {
    digitalWrite(display_mosi, d & bit);
    digitalWrite(display_clk , HIGH);
    digitalWrite(display_clk , LOW);
  }
}

function spiCommand( d) {
  digitalWrite(display_cs , LOW);
  digitalWrite(display_cmddata , LOW);
  spiWrite1(d);
  digitalWrite(display_cs , HIGH);
}

function spiWrite( d) {
  digitalWrite(display_cs , LOW);
  digitalWrite(display_cmddata , HIGH);
  spiWrite1(d);
  digitalWrite(display_cs , HIGH);
}


function setAddrWindowDisplay( x,  y,  w,  h)
{
  console.log('setAWD0');
  widthheigthWindow = w * h;
  spiCommand(0x2A);
  spiWrite((x) >> 8);
  spiWrite(x & 255);
  spiWrite((x + w - 1) >> 8);
  spiWrite((x + w - 1 )  & 255);
  spiCommand(0x2B);
  spiWrite((y) >> 8);
  spiWrite(y & 255);
  spiWrite(((y + h - 1) & 0xFF) >> 8);
  spiWrite((y + h - 1) & 0xFF);
  spiCommand(0x2C);
  console.log('setAWD1');
}

function displayColor( color) {
  console.log('dispColor0');
  let v2 = 0;
  do
  {
    spiWrite(color >> 8);
    spiWrite(color & 255);
    v2++;
  }
  while ( v2 < widthheigthWindow );
  console.log('dispColor0');
}

function init_display() {
console.log('init0');
  pinMode(display_mosi, OUTPUT);
  pinMode(display_cmddata, OUTPUT);
  pinMode(display_clk, OUTPUT);
  pinMode(display_cs, OUTPUT);
  pinMode(display_reset, OUTPUT);
  pinMode(display_enable, OUTPUT);

  digitalWrite(display_enable, HIGH);

  delay(10);
  digitalWrite(display_cs, HIGH);
  digitalWrite(display_reset, HIGH);
  delay(20);
  digitalWrite(display_reset, LOW);
  delay(100);
  digitalWrite(display_reset, HIGH);
  delay(100);

  spiCommand(0xFE);
  spiWrite(1);
  spiCommand(0x6C);
  spiWrite(0xA);
  spiCommand(4);
  spiWrite(0xA0);
  spiCommand(254);
  spiWrite(5);
  spiCommand(5);
  spiWrite(1);
  spiCommand(254);
  spiWrite(0);
  spiCommand(53);
  spiWrite(0);
  spiCommand(54);
  spiWrite(192);
  spiCommand(0x3A);
  spiWrite(0x72);
  delay(10);
  spiCommand(83);
  spiWrite(32);
  spiCommand(196);
  spiWrite(128);
  spiCommand(17);
  delay(120);
  spiCommand(0x29);


  spiCommand(0x51);
  spiWrite(0xff);//Brigthness 0x90 0xC0 0xFF

  pinMode(D34, OUTPUT);

  digitalWrite(D34, LOW);
console.log('init1');
}


function displayRect( x,  y,  w,  h,  color) {
  console.log('displayRect0');
  setAddrWindowDisplay(x, y, w, h);
  displayColor(color);
  console.log('displayRect1');
}


function drawChar( x,  y,   c,  color,  bg,  size) {
  console.log('drawChar0');
  if (c < 32)return false;
  if (c >= 127) {
    if (!last_uni_char) {
      last_char = c;
      last_uni_char = true;
      return false;
    } else {
      last_uni_char = false;
      if (last_char == 0xC3) {
        switch (c) {
          case 0x84://Ä
            c = 0x8E;
            break;
          case 0xA4://ä
            c = 0x84;
            break;
          case 0x96://Ö
            c = 0x99;
            break;
          case 0xB6://ö
            c = 0x94;
            break;
          case 0x9C://Ü
            c = 0x9A;
            break;
          case 0xBC://ü
            c = 0x81;
            break;
          case 0x9F://ß
            c = 0x98;
            break;
          default:
            return false;
        }
      } else if (last_char == 0xF0 && c == 0x9F)
        c = 0x02;
      else
        return false;
    }
  }
  for (let i = 0; i < 5; i++) {
     line = font57[c * 5 + i];
    for (let j = 0; j < 8; j++, line >>= 1) {
      if (line & 1) {
        displayRect(x + i * size, y + j * size, size, size, color);
      } else if (bg != color) {
        displayRect(x + i * size, y + j * size, size, size, bg);
      }
    }
  }
  if (bg != color) {
    displayRect(x + 5 * size, y, size, 8 * size, bg);
  }
   console.log('drawChar1');
  return true;
}

function my_strlen(str)
{
  return i.length;
}

function displayPrintln( x,  y,  text,  color,  bg,  size ) {
  console.log('displayPrintln0');
  let tempPosition = 0;
  for (let f = 0; f < my_strlen(text); f++)
  {
    if (x + (tempPosition * 6 * size) >= 390 - (6 * size)) {
      x = -(tempPosition * 6 * size);
      y += (8 * size);
    }
    if (drawChar(x + (tempPosition * 6 * size), y, text[f], color, bg, size)) {
      tempPosition++;
    }
  }
  console.log('displayPrintln1');
}

function setup() {
  // initialize digital pin LED_BUILTIN as an output.
  //Serial.begin(115200);
  console.log("Hello");
  pinMode(D39, OUTPUT);
  digitalWrite(D39, LOW);
  init_display();

  displayRect(0, 0, 454, 454, 0x0000);
  displayRect(195 - 22, 45, 100, 100, 0x2721);
  /*
  displayPrintln(100, 150, "G5 Demo", 0x1A1E, 0x0000, 2);
  displayPrintln(100, 120 + (7 * 7) + 5, "Twitter: @ATC1441", 0xFBA8, 0x0000, 2);
  displayPrintln(100, 150 + (7 * 7) + 5, "ATCnetz.de", 0xFBA8, 0x0000, 2);
  displayPrintln(100, 200 + (7 * 7) + 5, "Software SPI demo", 0xFBA8, 0x0000, 2);
  displayPrintln(100, 220 + (7 * 7) + 5, "454x454 Pixel", 0xFBA8, 0x0000, 2);
  displayPrintln(50, 240 + (7 * 7) + 5, "Display Pinout:", 0x1A1E, 0x0000, 2);
  displayPrintln(60, 260 + (7 * 7) + 5, "CLK 5, MOSI 11, EN 3", 0x1A1E, 0x0000, 2);
  displayPrintln(70, 280 + (7 * 7) + 5, "CS 26, DC27, ENoutput 34", 0x1A1E, 0x0000, 2);
  displayPrintln(80, 300 + (7 * 7) + 5, "RESET 40", 0x1A1E, 0x0000, 2);
  displayPrintln(90, 320 + (7 * 7) + 5, "Vibration 40", 0x1A1E, 0x0000, 2);
  */
}

// the loop function runs over and over again forever
function loop() {
  let time_string='';
  sprintf(time_string, "%i", millis());
  displayPrintln(150, 170 + (7 * 7) + 5, time_string, 0xFBA8, 0x0000, 2);
  let data_raw='';
  delay(10);

  displayRect(((data_raw[2] & 0xf) << 8) + data_raw[3], ((data_raw[4] & 0xf) << 8) + data_raw[5], 2, 2, 0xffff);

}